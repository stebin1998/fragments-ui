"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
//
// Node.js implementations for the node-web-compatibility layer
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeWebCompat = void 0;
const crypto_1 = require("crypto");
const https_node_js_1 = require("./https-node.js");
/**
 * Enum to map supported JWT signature algorithms with OpenSSL message digest algorithm names
 */
var JwtSignatureAlgorithmHashNames;
(function (JwtSignatureAlgorithmHashNames) {
    JwtSignatureAlgorithmHashNames["RS256"] = "RSA-SHA256";
    JwtSignatureAlgorithmHashNames["RS384"] = "RSA-SHA384";
    JwtSignatureAlgorithmHashNames["RS512"] = "RSA-SHA512";
    JwtSignatureAlgorithmHashNames["ES256"] = "RSA-SHA256";
    JwtSignatureAlgorithmHashNames["ES384"] = "RSA-SHA384";
    JwtSignatureAlgorithmHashNames["ES512"] = "RSA-SHA512";
})(JwtSignatureAlgorithmHashNames || (JwtSignatureAlgorithmHashNames = {}));
exports.nodeWebCompat = {
    fetch: https_node_js_1.fetch,
    transformJwkToKeyObjectSync: (jwk) => (0, crypto_1.createPublicKey)({
        key: jwk,
        format: "jwk",
    }),
    transformJwkToKeyObjectAsync: async (jwk) => (0, crypto_1.createPublicKey)({
        key: jwk,
        format: "jwk",
    }),
    parseB64UrlString: (b64) => Buffer.from(b64, "base64").toString("utf8"),
    verifySignatureSync: ({ alg, keyObject, jwsSigningInput, signature }) => alg !== "EdDSA"
        ? // eslint-disable-next-line security/detect-object-injection
            (0, crypto_1.createVerify)(JwtSignatureAlgorithmHashNames[alg])
                .update(jwsSigningInput)
                .verify({
                key: keyObject,
                dsaEncoding: "ieee-p1363", // Signature format r || s (not used for RSA)
            }, signature, "base64")
        : (0, crypto_1.verify)(null, Buffer.from(jwsSigningInput), keyObject, Buffer.from(signature, "base64")),
    verifySignatureAsync: async (args) => exports.nodeWebCompat.verifySignatureSync(args),
    defaultFetchTimeouts: {
        socketIdle: 1500,
        response: 3000,
    },
    setTimeoutUnref: (...args) => setTimeout(...args).unref(),
};
