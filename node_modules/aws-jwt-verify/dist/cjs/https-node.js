"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
//
// NodeJS implementation for fetching documents over HTTPS
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetch = fetch;
const https_1 = require("https");
const stream_1 = require("stream");
const error_js_1 = require("./error.js");
/**
 * Execute a HTTPS request
 * @param uri - The URI
 * @param requestOptions - The RequestOptions to use
 * @param data - Data to send to the URI (e.g. POST data)
 * @returns - The response body
 */
async function fetch(uri, requestOptions, data) {
    let responseTimeout;
    return new Promise((resolve, reject) => {
        const req = (0, https_1.request)(uri, {
            method: "GET",
            ...requestOptions,
        }, (response) => {
            // check status
            if (response.statusCode !== 200) {
                done(new error_js_1.NonRetryableFetchError(uri, `Status code is ${response.statusCode}, expected 200`));
                return;
            }
            // Collect response data
            (0, stream_1.pipeline)(response, async (responseBody) => {
                const chunks = [];
                for await (const chunk of responseBody) {
                    chunks.push(chunk);
                }
                return Buffer.concat(chunks);
            }, done);
        });
        if (requestOptions?.responseTimeout) {
            responseTimeout = setTimeout(() => done(new error_js_1.FetchError(uri, `Response time-out (after ${requestOptions.responseTimeout} ms.)`)), requestOptions.responseTimeout);
            responseTimeout.unref(); // Don't block Node from exiting
        }
        function done(err, data) {
            if (responseTimeout)
                clearTimeout(responseTimeout);
            if (err == null) {
                resolve(data);
                return;
            }
            // In case of errors, let the Agent (if any) know to abandon the socket
            // This is probably best, because the socket may have become stale
            /* istanbul ignore next */
            req.socket?.emit("agentRemove");
            // Turn error into FetchError so the URI is nicely captured in the message
            if (!(err instanceof error_js_1.FetchError)) {
                err = new error_js_1.FetchError(uri, err.message);
            }
            req.destroy();
            reject(err);
        }
        // Handle errors while sending request
        req.on("error", done);
        // Signal end of request (include optional data)
        req.end(data);
    });
}
